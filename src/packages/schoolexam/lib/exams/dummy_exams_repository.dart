import 'package:schoolexam/exams/exams.dart';

class DummyExamsRepository extends ExamsRepository {
  const DummyExamsRepository() : super();

  @override
  Future<Exam> getExam(String examId) async {
    var exams = await getExams();

    return exams.firstWhere((element) => element.id == examId,
        orElse: () => Exam.empty);
  }

  @override
  Future<List<Exam>> getExams() async {
    return [
      Exam(
          id: "e001",
          status: ExamStatus.planned,
          title: "Projektmanagement",
          dateOfExam: DateTime.utc(2021, 12, 11),
          dueDate: DateTime.utc(2022, 01, 11),
          topic: "Sozialwissenschaften",
          quota: 0.0,
          participants: [
            Course(id: "c001", displayName: "8a", children: [
              Student(id: "s001", displayName: "Max Mustermann"),
              Student(id: "s002", displayName: "Lars Becker")
            ])
          ],
          tasks: []),
      Exam(
          id: "e002",
          status: ExamStatus.inCorrection,
          title: "Europa L2",
          dateOfExam: DateTime.utc(2021, 11, 15),
          dueDate: DateTime.utc(2021, 12, 15),
          topic: "Sozialwissenschaften",
          quota: 55.0,
          participants: [
            Course(id: "c002", displayName: "9b", children: [
              Student(id: "s001", displayName: "Max Mustermann"),
              Student(id: "s002", displayName: "Lars Becker")
            ])
          ],
          tasks: [
            Task(id: "t001", title: "Aufgabe 1", maxPoints: 5),
            Task(id: "t002", title: "Aufgabe 2", maxPoints: 10),
          ]),
      Exam(
          id: "e003",
          status: ExamStatus.corrected,
          title: "Vokabeltest L1",
          dateOfExam: DateTime.utc(2021, 12, 08),
          dueDate: DateTime.utc(2022, 01, 08),
          topic: "Englisch",
          quota: 100.0,
          participants: [
            Course(id: "c003", displayName: "6a", children: [
              Student(id: "s001", displayName: "Max Mustermann"),
              Student(id: "s002", displayName: "Lars Becker")
            ])
          ],
          tasks: [])
    ];
  }

  @override
  Future<List<Submission>> getSubmissions({required String examId}) async {
    final Exam? exam = (await getExams())
        .firstWhere((element) => element.id == examId, orElse: null);

    if (exam == null) return [];

    final String pdf1 =
        "";
    final segments = [
      AnswerSegment(
          start: SegmentPosition(page: 1, y: 0),
          end: SegmentPosition(page: 2, y: 0))
    ];

    final answers = exam.tasks
        .map((e) => Answer(
            task: Task(id: e.id, title: e.title, maxPoints: e.maxPoints),
            segments: segments,
            achievedPoints: 0,
            status: CorrectableStatus.pending))
        .toList(growable: false);

    return exam
        .getParticipants()
        .map((e) => Submission(
            id: "$examId _ ${e.id}",
            exam: exam,
            student: Student(id: e.id, displayName: e.displayName),
            data: pdf1,
            answers: answers,
            achievedPoints: 0,
            status: CorrectableStatus.pending))
        .toList(growable: false);
  }
}
